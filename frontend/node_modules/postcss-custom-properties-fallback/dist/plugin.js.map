{"version":3,"file":"plugin.js","sources":["../src/plugin.js"],"sourcesContent":["const getCustomPropertiesFromImports = require('./import-from.js');\n\nconst valueParser = require('postcss-value-parser');\n// match custom property inclusions\n// @TODO optimize to skip vars with fallbacks already\nconst customPropertiesRegExp = /(^|[^\\w-])var\\([\\W\\w]+\\)/;\n// var\\([\\W\\w]+,[\\W\\w]+\\) template for detecting if skippable?\n\n// whether the declaration should be potentially transformed\nconst isTransformableDecl = (decl) => customPropertiesRegExp.test(decl.value);\n\nconst { nodeToString } = require('postcss-values-parser');\n\n// eslint-disable-next-line no-empty-pattern\nmodule.exports = (opts) => ({\n  postcssPlugin: 'postcss-custom-properties-fallback',\n  prepare() {\n    // sources to import custom selectors from\n    const importFrom = [].concat(Object(opts).importFrom || []);\n    // promise any custom selectors are imported\n    const customPropertiesPromise = getCustomPropertiesFromImports(importFrom);\n\n    return {\n      async Declaration(node) {\n        if (isTransformableDecl(node)) {\n          const customProperties = await customPropertiesPromise;\n\n          const parsed = valueParser(node.value);\n\n          parsed.walk((node) => {\n            // Only deal with vars without a fallback\n            if (node.type !== 'function' || node.nodes.length !== 1) {\n              return;\n            }\n            const fallback = customProperties[node.nodes[0].value];\n\n            if (fallback && fallback.length === 1) {\n              node.nodes.push(\n                {\n                  type: 'divider',\n                  value: ',',\n                },\n                {\n                  type: 'word',\n                  value: fallback,\n                }\n              );\n            }\n\n            //when fallback value contains more then one node, stringify them with value parser used to parse the customProperties object and add as one node type word.\n            if (fallback && fallback.length > 1) {\n              node.nodes.push(\n                {\n                  type: 'divider',\n                  value: ',',\n                },\n                {\n                  type: 'word',\n                  value: fallback\n                    .map((fallbackNode) => nodeToString(fallbackNode))\n                    .join(' '),\n                }\n              );\n            }\n          });\n\n          node.value = parsed.toString();\n        }\n      },\n    };\n  },\n});\n"],"names":["getCustomPropertiesFromImports","require","valueParser","customPropertiesRegExp","isTransformableDecl","decl","test","value","nodeToString","module","exports","opts","postcssPlugin","prepare","importFrom","concat","Object","customPropertiesPromise","Declaration","node","customProperties","parsed","walk","type","nodes","length","fallback","push","map","fallbackNode","join","toString"],"mappings":"AAAA,MAAMA,8BAA8B,GAAGC,OAAO,CAAC,kBAAD,CAA9C,CAAA;;AAEA,MAAMC,WAAW,GAAGD,OAAO,CAAC,sBAAD,CAA3B;AAEA;;;AACA,MAAME,sBAAsB,GAAG,0BAA/B;AAGA;;AACA,MAAMC,mBAAmB,GAAIC,IAAD,IAAUF,sBAAsB,CAACG,IAAvB,CAA4BD,IAAI,CAACE,KAAjC,CAAtC,CAAA;;AAEA,MAAM;AAAEC,EAAAA,YAAAA;AAAF,CAAA,GAAmBP,OAAO,CAAC,uBAAD,CAAhC;;;AAGAQ,MAAM,CAACC,OAAP,GAAkBC,IAAD,KAAW;AAC1BC,EAAAA,aAAa,EAAE,oCADW;;AAE1BC,EAAAA,OAAO,GAAG;AACR;AACA,IAAA,MAAMC,UAAU,GAAG,EAAGC,CAAAA,MAAH,CAAUC,MAAM,CAACL,IAAD,CAAN,CAAaG,UAAb,IAA2B,EAArC,CAAnB,CAFQ;;AAIR,IAAA,MAAMG,uBAAuB,GAAGjB,8BAA8B,CAACc,UAAD,CAA9D,CAAA;AAEA,IAAO,OAAA;AACL,MAAMI,MAAAA,WAAN,CAAkBC,IAAlB,EAAwB;AACtB,QAAA,IAAIf,mBAAmB,CAACe,IAAD,CAAvB,EAA+B;AAC7B,UAAMC,MAAAA,gBAAgB,GAAG,MAAMH,uBAA/B,CAAA;AAEA,UAAA,MAAMI,MAAM,GAAGnB,WAAW,CAACiB,IAAI,CAACZ,KAAN,CAA1B,CAAA;AAEAc,UAAAA,MAAM,CAACC,IAAP,CAAaH,IAAD,IAAU;AACpB;AACA,YAAA,IAAIA,IAAI,CAACI,IAAL,KAAc,UAAd,IAA4BJ,IAAI,CAACK,KAAL,CAAWC,MAAX,KAAsB,CAAtD,EAAyD;AACvD,cAAA,OAAA;AACD,aAAA;;AACD,YAAMC,MAAAA,QAAQ,GAAGN,gBAAgB,CAACD,IAAI,CAACK,KAAL,CAAW,CAAX,CAAcjB,CAAAA,KAAf,CAAjC,CAAA;;AAEA,YAAA,IAAImB,QAAQ,IAAIA,QAAQ,CAACD,MAAT,KAAoB,CAApC,EAAuC;AACrCN,cAAAA,IAAI,CAACK,KAAL,CAAWG,IAAX,CACE;AACEJ,gBAAAA,IAAI,EAAE,SADR;AAEEhB,gBAAAA,KAAK,EAAE,GAAA;AAFT,eADF,EAKE;AACEgB,gBAAAA,IAAI,EAAE,MADR;AAEEhB,gBAAAA,KAAK,EAAEmB,QAAAA;AAFT,eALF,CAAA,CAAA;AAUD,aAlBmB;;;AAqBpB,YAAA,IAAIA,QAAQ,IAAIA,QAAQ,CAACD,MAAT,GAAkB,CAAlC,EAAqC;AACnCN,cAAAA,IAAI,CAACK,KAAL,CAAWG,IAAX,CACE;AACEJ,gBAAAA,IAAI,EAAE,SADR;AAEEhB,gBAAAA,KAAK,EAAE,GAAA;AAFT,eADF,EAKE;AACEgB,gBAAAA,IAAI,EAAE,MADR;AAEEhB,gBAAAA,KAAK,EAAEmB,QAAQ,CACZE,GADI,CACCC,YAAD,IAAkBrB,YAAY,CAACqB,YAAD,CAD9B,CAEJC,CAAAA,IAFI,CAEC,GAFD,CAAA;AAFT,eALF,CAAA,CAAA;AAYD,aAAA;AACF,WAnCD,CAAA,CAAA;AAqCAX,UAAAA,IAAI,CAACZ,KAAL,GAAac,MAAM,CAACU,QAAP,EAAb,CAAA;AACD,SAAA;AACF,OAAA;;AA9CI,KAAP,CAAA;AAgDD,GAAA;;AAxDyB,CAAX,CAAjB;;"}